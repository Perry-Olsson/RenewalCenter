generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  timestamp   DateTime  @db.Timestamptz(6)
  end         DateTime  @db.Timestamptz(6)
  comments    String?   
  procedureId String    @map("procedure_id") @db.VarChar(100)
  procedure   Procedure @relation(fields: [procedureId], references: [name])
  providerId  String    @map("provider_id") @db.VarChar(100)
  provider    Provider  @relation(fields: [providerId], references: [email])
  customerId  String    @map("customer_id") @db.VarChar(100)
  customer    Customer  @relation(fields: [customerId], references: [email])

  @@map("appointments")
}

model Customer {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  tokenVersion Int           @default(0) @map("token_version")
  firstName    String        @map("first_name") @db.VarChar(50)
  lastName     String        @map("last_name") @db.VarChar(50)
  type         Type
  email        String        @unique @db.VarChar(100)
  phoneNumber  String        @map("phone_number") @db.VarChar(25)
  password     String?       @db.VarChar(60)
  appointments Appointment[]

  @@map("customers")
}

model Provider {
  email        String        @id @db.VarChar(100)
  firstName    String        @map("first_name") @db.VarChar(50)
  lastName     String        @map("last_name") @db.VarChar(50)
  title        String        @db.VarChar(100)
  bio          String?       @db.Text
  schedule     Schedule?
  procedures   Procedure[]
  appointments Appointment[]

  @@map("providers")
}

model Schedule {
  id         Int      @id @default(autoincrement())
  providerId String   @unique @map("provider_id") @db.VarChar(100)
  provider   Provider @relation(fields: [providerId], references: [email])
  Sunday     String[] @map("sunday") @db.Char(6)
  Monday     String[] @map("monday") @db.Char(6)
  Tuesday    String[] @map("tuesday") @db.Char(6)
  Wednesday  String[] @map("wednesday") @db.Char(6)
  Thursday   String[] @map("thursday") @db.Char(6)
  Friday     String[] @map("friday") @db.Char(6)
  Saturday   String[] @map("saturday") @db.Char(6)

  @@map("schedules")
}

model Procedure {
  name        String        @id @db.VarChar(100)
  duration    Int           @db.SmallInt
  description String?
  providers   Provider[]
  Appointment Appointment[]

  @@map("procedures")
}

model ServiceHours {
  day      Int     @id
  open     String  @default("09:00") @db.Char(5)
  close    String  @default("18:00") @db.Char(5)
  isClosed Boolean @default(false) @map("is_closed")

  @@map("service_hours")
}

model Test {
  id   Int      @id @default(autoincrement())
  text String
  date DateTime @db.Date
  time DateTime @db.Time

  @@map("test")
}

enum Type {
  USER
  GUEST
}
